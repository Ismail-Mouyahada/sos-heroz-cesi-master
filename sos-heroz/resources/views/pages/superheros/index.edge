@layout('layouts/app')
@section('content')

<section class="bg-gray-50 dark:bg-gray-900 p-3 sm:p-5">
  <div class=" W-100 px-4 lg:px-12">
    <!-- Start coding here -->
    <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
      <div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
        <div class="w-full md:w-full">
          <form class="flex items-center">
            <label for="simple-search" class="sr-only">Chercher</label>
            <div class="relative w-full">
              <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <i class="fa fa-search"></i>
              </div>
              <input type="search" id="search" name="search"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                placeholder="Chercher" required="">
            </div>
          </form>
        </div>

        <!-- Modal toggle -->
        <div class="flex justify-center m-5">
          <a href="{{route('superhero.create')}}"
            class="block text-white bg-emerald-400 hover:bg-emerald-800 focus:ring-4 focus:outline-none focus:ring-emerald-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
            Créer
          </a>
        </div>

      </div>
      <div class=" w-full">
        <div class="rounded-md my-2" id="map" style="height:400px; width:100%;"></div>
      </div>

      <div class=" w-full shadow p-2 m-2">
        <label for="default-range" class="block mb-2 text-sm font-medium text-emerald-900 dark:text-white">Selectionner
          le
          rayon de recherche</label>
        <input type="range" min="100" max="10000000" step="1" value="1000" id="radiusInput" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer
          dark:bg-gray-700">

      </div>


      <div class="overflow-x-auto">
        <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
              <th scope="col" class="px-4 py-3">#</th>
              <th scope="col" class="px-4 py-3">Image</th>
              <th scope="col" class="px-4 py-3">Nom d'hero</th>
              <th scope="col" class="px-4 py-3">Nom</th>
              <th scope="col" class="px-4 py-3">Prenom</th>
              <th scope="col" class="px-4 py-3">Tel</th>
              <th scope="col" class="px-4 py-3">Disponible</th>
              <th scope="col" class="px-4 py-3">Max Mission</th>
              <th scope="col" class="px-4 py-3">
                <span class="sr-only">Actions</span>
              </th>
            </tr>
          </thead>
          <tbody>
            @each(item in superheros)
            <tr class="border-b dark:border-gray-700">
              <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white"> {{
                item.id}} </th>
              <td class="px-4 py-3">
                <img src="{{ item.profil }}" alt="profile" class="w-auto h-10 mr-3 rounded-full" />
              </td>
              <td class="px-4 py-3">{{ item.nom_heroique }} </td>
              <td class="px-4 py-3">{{ item.nom }} </td>
              <td class="px-4 py-3">{{ item.prenom }} </td>
              <td class="px-4 py-3">{{ item.tel }} </td>
              <td class="px-4 py-3 "><span
                  class="w-full {{ item.disponible?'bg-emerald-400 p-2 rounded-md  text-white ':'bg-red-400 p-2 rounded-md text-white ' }}">{{
                  item.disponible == true ?'Oui':'Non' }}</span> </td>
              <td class="px-4 py-3">{{ item.max_mission }} </td>

              <td class="px-4 py-3 flex items-center justify-end">

                <ul class=" flex ">
                  <li><a class="shadow text-emerald-500 bg-emerald-50 p-2 mx-2 rounded-md"
                      href="{{ route('superhero.show', {id: item.id})}}"><i class="fa fa-eye "></i></a></li>
                  <li><a class="shadow text-amber-400 bg-orange-50 p-2 mx-2 rounded-md"
                      href="{{ route('superhero.edit', {id: item.id})}}"><i class="fa fa-pen "></i></a></li>
                  <li>

                    <a class="shadow text-red-400 bg-red-50 p-2 mx-2 rounded-md"
                      onclick="document.getElementById('dleteFrom-{{item.id}}').submit()"><i
                        class="fa fa-trash "></i></a>

                    <form action="{{ route('superhero.delete', {id: item.id})}}" method="POST"
                      id="dleteFrom-{{item.id}}">
                      {{ csrfField() }}
                      <button type="submit" class=" "> </button>
                    </form></i></a>
                  </li>
                </ul>
              </td>
            </tr>
            @end
          </tbody>
        </table>
      </div>

    </div>
  </div>






</section>
<div id="notification" class="notification">
  <span id="notificationTitle" class="notification__title"></span>
  <span id="notificationMessage" class="notification__message"></span>
</div>

<style>
  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 10px;
    background-color: #e2e8f0;
    color: #4a5568;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: none;
  }

  .notification__title {
    font-weight: bold;
  }

  .notification__message {
    display: block;
    margin-top: 5px;
  }
</style>
<script>


  document.addEventListener('DOMContentLoaded', () => {
    const map = L.map('map').setView([0, 0], 1); // Centre par défaut à [0, 0] avec un niveau de zoom de 2

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Données de la carte &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributeurs',
    }).addTo(map);

    let circle; // Variable pour stocker le cercle

    // Obtenir la position actuelle de l'utilisateur en utilisant l'API de géolocalisation HTML5

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        map.setView([latitude, longitude], 1); // Mettre à jour la vue de la carte avec la position actuelle de l'utilisateur

        L.marker([latitude, longitude]).addTo(map); // Ajouter un marqueur à la position actuelle de l'utilisateur

        // Ajouter des marqueurs pour les positions des super-héros
        const superheroes = [
          // Ajoutez les données des super-héros avec les coordonnées de latitude et de longitude
          // Utilisez la boucle @each pour parcourir les superheros et générer les objets
          @each(item in superheros)
          {
            name: 'Superhéros {{item.nom_heroique}}',
            image: "{{item.profil}}",
            latitude: {{ item.latitude }},
      longitude: {{ item.longitude }},
          },
    @end
        ];

  const superheroMarkers = []; // Stocker les marqueurs de super-héros dans le rayon

  superheroes.forEach((superhero) => {
    const { latitude, longitude, name, image } = superhero;

    // Créer une icône personnalisée pour le marqueur
    const icon = L.icon({
      iconUrl: image,
      iconSize: [32, 32], // Ajustez la taille selon les besoins
      popupAnchor: [0, -16], // Ajustez la position de l'ancre de la fenêtre contextuelle
      className: 'rounded-full border-emerald-500 border-solid border-4'
    });

    const marker = L.marker([latitude, longitude], { icon }).addTo(map);

    // Créer un contenu de fenêtre contextuelle avec le nom et l'image du super-héros
    const popupContent = `
            <div>
              <h4>${name}</h4>
              <img src="${image}" alt="${name}" style="width: 100px; border-radius: 50%;">
            </div>
          `;

    marker.bindPopup(popupContent); // Ajouter le contenu de la fenêtre contextuelle au marqueur

    superheroMarkers.push(marker);
  });

  // Ajouter un marqueur de cercle pour la position de l'utilisateur
  const circleMarker = L.circleMarker([latitude, longitude], {
    radius: 6,
    color: '#3388ff',
    fillColor: '#3388ff',
    fillOpacity: 0.8,
  }).addTo(map);

  // Ajouter un cercle modifiable autour de la position de l'utilisateur
  circle = L.circle([latitude, longitude], {
    radius: 1000, // Rayon initial en mètres
    color: '#3388ff',
    fillColor: '#3388ff',
    fillOpacity: 0.2,
    editable: true, // Act
  }).addTo(map);
  // Gérer l'événement de modification de l'entrée de plage
  const radiusInput = document.getElementById('radiusInput');
  radiusInput.addEventListener('input', (event) => {
    const newRadius = parseInt(event.target.value);
    circle.setRadius(newRadius);
    console.log('Rayon mis à jour :', newRadius);
  });

      }
    );

});




</script>



@endsection
